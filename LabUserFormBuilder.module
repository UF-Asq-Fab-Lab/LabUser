<?php
/**
 * InfinityFab Lab LabUser Module
 *
 * Developed for the Infinity Fab Lab at the University of Florida.
 * Builds and injects forms via hooks to the frontend and backend.
 *
 * Thomas R Storey, 2015
 * Licensed under MIT License, see LICENSE.TXT
 *
 * http://fablab.arts.ufl.edu
 * https://github.com/UF-Asq-Fab-Lab
 *
 */

 class LabUserFormBuilder extends ModuleJS implements Module {

   protected $event;
   protected $config_data;

   public static function getModuleInfo() {
     return array(
       'title' => 'Infinity Fab Lab LabUser Form Builder',
       'summary' => 'Builds forms for extended User functions',
       'version' => 100,
       'author' => "Thomas R Storey",
       'autoload' => false,
       'singular' => false,
       'permanent' => false,
       'requires' => array("LabUser>=1.0.0")
     );
   }

   public function init(){

   }

   public function __construct($event, $response){
     $this->event = $event;
     $this->response = $response;
     $this->config_data = $this->modules->getModuleConfigData("LabUser");
   }

   public function buildAdminForm($formtype){
     //generic formbuider
     //build something using the inputfield form, return the rendered output
     $wrapper = $this->modules->get("InputfieldForm");
     $captype = ucwords($formtype);
     $wrapper->attr('id', $captype);
     $wrapper->attr('title', $captype." Form");
     $inputfields = $this->modules->get("LabUser")->getInputfields();
     $formfields = $inputfields[$formtype."_form"];
     foreach ($formfields as $key => $array) {
         $field = $this->modules->get($array['type']);
         foreach ($array as $key => $value) {
           if(!strcmp($key, "type")){
             continue;
           } else if(!strcmp($key, "label")) {
             $field->label = $value;
           } else {
             $field->attr($key, $value);
           }
         }
         $wrapper->append($field);
     }
    //  $cssinclude = '<link rel="stylesheet" type="text/css" href="%s"><link rel="stylesheet" type="text/css" href="%s">';
    //  $cssinclude = sprintf($cssinclude, $this->config->urls->$class . "$class.css", $this->config->urls->adminTemplates."styles/font-awesome/css/font-awesome.min.css");
     return $res_str.$wrapper->render();
   }

   public function buildForm($formtype){
     $inputfields = $this->modules->get("LabUser")->getInputfields();
     $formfields = $inputfields[$formtype."_form"];
     $number_words = array("zero","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve");
     $form = "<form id='$formtype' class='LabUserForm' action='./' method='post'>";
     $colcount = 0;
     foreach ($formfields as $field => $attrs) {
       if($colcount == 0){
         $form.= "<div class='row'>";
       }
       $fieldcols = 0;
       if(array_key_exists("columns", $attrs)){
         $fieldcols = $attrs["columns"];
         $colcount+=$fieldcols;
         $columnclass = $number_words[$fieldcols]." columns";
         $form.="<div class='{$columnclass}'>";
       } else {
         $fieldcols = 12 - $colcount;
         $colcount += $fieldcols;
         $columnclass = $columnclass = $number_words[$fieldcols]." columns";
         $form.="<div class='twelve columns'>";
       }
       if(array_key_exists("label", $attrs)){
         $label = $attrs["label"];
         $form.="<label for='$field'>$label</label>";
       }
       if($attrs["type"] == "select"){
        //  TODO: get select params
       }
       $placeholder = "";
       if(array_key_exists("placeholder", $attrs)){
         $placeholder = $attrs["placeholder"];
       }
       $required = 0;
       if(array_key_exists("required", $attrs)){
         $required = 1;
       }
       $fieldclass='';
       if($attrs['type'] != 'submit'){
         $fieldclass='u-full-width';
       }
       $form.=sprintf("<input class='{$fieldclass}' type='%s' id='%s' name='%s' required='%d' placeholder='%s' value='%s'></input></div>",
       $attrs['type'], $attrs['id'], $attrs['name'], $required, $placeholder, $attrs['value']);
       if($colcount >= 12){
         $colcount = 0;
         $form.="</div>";
       }
     }
     $form.="</form>";

     $res_str = "";
     foreach ($this->response as $value) {
       $res_str.=$value;
     }
     $this->response = array();
     return $res_str.$form;
   }

   public function buildUploadsTable(){
    //  build a list of uploadpage files, displaying their filename and status
    // may be best to build my own markup in this case
    // get all uploads by this user
    $user = wire('user');
    if($user->isLoggedIn()){
      $uploads = wire('pages')->find("ufid=$user->ufid, template=upload, check_access=0, include=all");
      $out = "<label class='lab-user-uploads-table-label'>Uploads Table</label>\n";
      $out .= "<table class='lab-user-uploads-table'>\n";
      $out .= "<tr class=lab-user-uploads-header><th>File Name</th><th>Material</th><th>Timestamp</th><th>Status</th>\n";
      if($uploads->count()){
        foreach ($uploads as $key => $value) {
          if($value->upload_file && $value->timestamp && $value->status){
            $out .= "<tr class=lab-user-uploads-row>\n";
            $out .= sprintf("<td>%s</td>", $value->upload_file->name);
          $out .= sprintf("<td>%s</td>", wire('pages')->get($value->material[sizeof($value->material)-1]->id)->title);
            $out .= sprintf("<td>%s</td>", $value->timestamp);
          $out .= sprintf("<td>%s</td>", wire('pages')->get($value->upload_status[sizeof($value->upload_status)-1]->id)->title); // this should work
            $out .= "</tr>";
          }
        }
      } else {
        $out .= "<p>No uploads to display.</p>";
      }
      return $out .= "</table>";
    } else {
      return "";
    }
   }

   public function buildChargesTable(){
     $charges = wire('pages')->find("ufid=$user->ufid, template=charge, check_access=0, include=all");
     $out = "<table class='lab-user-charges-table'>\n";
     foreach ($charges as $key => $value) {
       $out .= "<tr class=lab-user-charges-row>\n";
       $out .= sprintf("<td>%s</td>", $value->title);
       $out .= sprintf("<td>%s</td>", $value->item);
       $out .= sprintf("<td>%s</td>", $value->amount);
       $out .= sprintf("<td>%s</td>", $value->timestamp);
       $out .= "</tr>";
     }
     return $out .= "</table>";
   }

 }
 ?>
