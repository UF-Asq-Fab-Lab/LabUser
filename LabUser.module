<?php
/**
 * A²Fab Lab User Extensions Module
 *
 * Developed for the A² Fab Lab at the University of Florida.
 * Root Module that handles installing, uninstalling and hooking together
 * the child modules for the Lab User extensions. Login, registration, account
 * management are all covered.
 *
 * Thomas R Storey, 2015
 * Licensed under MIT License, see LICENSE.TXT
 *
 * http://fablab.arts.ufl.edu
 * https://github.com/UF-Asq-Fab-Lab
 *
 */

 class LabUser extends WireData implements Module, ConfigurableModule {

   protected $accountPageID;
   protected $loginPageID;
   protected $registrationPageID;
   protected $resetPassPageID;
   //these will be passed to the form builder object upon initialization for
   //conditional form rendering.
   protected $response;
   protected $roles = array(
     "tmpuser" => array(
       "page-view"
     ),
     "user" => array(
       "page-view", "profile-edit"
     ),
     "intern" => array(
       "page-view", "profile-edit", "page-edit", "page-delete"
     ),
     "assistant" => array(
       "page-view", "profile-edit", "page-edit", "page-delete", "page-move", "page-lock", "user-admin"
     ),
     "admin" => array(
       "page-view",
       "profile-edit",
       "page-edit",
       "page-delete",
       "page-move",
       "page-lock",
       "page-sort",
       "page-template",
       "user-admin"
     )
   );

   public static function getModuleInfo(){
     return array(
       'title' => 'A² Fab Lab User Extensions',
       'summary' => 'The Root Module for the A² Fab Lab User Extensions',
       'version' => 100,
       'author' => "Thomas R Storey",
       'autoload' => true,
       'singular' => true,
       'permanent' => false,
       'installs' => array("LabUserFormBuilder")
     );
   }

   /**
   *
   */

   public static function getDefaultConfig(){
     return array(
       'login_page_id' => array(
        'type' => 'InputfieldInteger',
        'value' => 0,
        'label' => 'Login Page ID (should be filled automatically, but you may need to change it if you move the login page)',
         ),
       'register_page_id' => array(
        'type' => 'InputfieldInteger',
        'value' => 0,
        'label' => 'Register Page ID (should be filled automatically, but you may need to change it if you move the register page)',
         ),
       'account_page_id' => array(
        'type' => 'InputfieldInteger',
        'value' => 0,
        'label' => 'Account Page ID (should be filled automatically, but you may need to change it if you move the account page)',
         ),
       'reset_page_id' => array(
         'type' => 'InputfieldInteger',
         'value' => 0,
         'label' => 'Password Reset Page ID (should be filled automatically, but you may need to change it if you move the page)'
       ),
       'orientation_code' => array(
         'type' => 'InputfieldText',
         'value' => 'code',
         'label' => 'Set the code that users have to input to prove they completed an orientation. Change this every orientation session!'
       ),
       'contact_email' => array(
        'type' => 'InputfieldEmail',
        'value' => 'admin@fablab.com',
        'label' => 'Contact email for all user-related communications',
        ),
       'contact_name' => array(
        'type' => 'InputfieldText',
        'value' => 'Fablab Admin',
        'label' => 'Contact name for all user-related communications',
        ),
       'register_subject' => array(
        'type' => 'InputfieldText',
        'value' => 'Fablab Registration: Confirm your email address',
        'label' => 'Subject line for automated registration emails.',
        ),
       'register_body' => array(
        'type' => 'InputfieldTextarea',
        'value' => 'Follow <a href="[url]">this link</a> to confirm your email address and activate your account!',
        'label' => 'Body text for automated registration emails.',
        ),
        'confirm_subject' => array(
         'type' => 'InputfieldText',
         'value' => 'Fablab Registration: Thanks! Your email address is confirmed',
         'label' => 'Subject line for automated account confirmation emails',
         ),
        'confirm_body' => array(
         'type' => 'InputfieldTextarea',
         'value' => 'Your email address has been successfully verified. Your next step is to go to an orientation if you have not already.',
         'label' => 'Body text for automated account confirmation emails',
         ),
       'reset_subject' => array(
        'type' => 'InputfieldText',
        'value' => 'Fablab Account: You reset your password',
        'label' => 'Subject line for automated registration emails.',
       ),
       'reset_body' => array(
         'type' => 'InputfieldTextarea',
         'value' => 'You requested that your Fablab account password be reset. Your new password is: "[pass]".',
         'label' => 'Body text for automated password change emails. Should provide a link to confirm the password change'
       ),
       'oriented_subject' => array(
         'type' => 'InputfieldText',
         'value' => 'Fablab Orientation Confirmed!',
         'label' => 'Subject line for automated orientation confirmation emails'
       ),
       'oriented_body' => array(
         'type' => 'InputfieldTextarea',
         'value' => 'Your orientation with the Fablab has been confirmed in our system. You now have access to upload files for 3D printing and use the scheduler to reserve equipment! Welcome. We look forward to seeing what you make!',
         'label' => 'Body text for automated orientation confirmation emails.'
       )
     );
   }

   /**
   * Get info for inputfields for all the forms handled by this module.
   * login, register, change password, reset password request, reset password,
   * enter orientation code
   */

   public static function getInputfields(){
     return array (
      'login_form' => array( // login form
        'user' => array(
          'type' => 'text',
          'label' => 'Username',
          'id' => 'user',
          'name' => 'user',
          'required' => true,
          'value' => ''
        ),
        'pass' => array(
          'type' => 'password',
          'label' => 'Password',
          'id' => 'pass',
          'name' => 'pass',
          'required' => true,
          'value' => ''
        ),
        'login' => array(
          'type' => 'submit',
          'id' => 'login',
          'name' => 'login',
          'value' => 'Login'
        )
      ),
      'register_form' => array( // register form
        'username' => array(
          'type' => 'text',
          'label' => 'Username',
          'id' => 'user',
          'name' => 'user',
          'required' => true,
          'value' => ''
        ),
        'email' => array(
          'type' => 'email',
          'label' => 'Email Address',
          'id' => 'email',
          'name' => 'email',
          'required' => true,
          'value' => ''
        ),
        'confirm_email' => array(
          'type' => 'email',
          'label' => 'Confirm Email',
          'id' => 'confirm_email',
          'name' => 'confirm_email',
          'required' => true,
          'value' => ''
        ),
        'ufid' => array(
          'type' => 'text',
          'label' => 'UFID Number',
          'id' => 'ufid',
          'name' => 'ufid',
          'required' => true,
          'value' => '',
          'placeholder' => '########'
        ),
        'pass' => array(
          'type' => 'password',
          'label' => 'Password',
          'id' => 'pass',
          'name' => 'pass',
          'required' => true,
          'value' => ''
        ),
        'confirm_pass' => array(
          'type' => 'password',
          'label' => 'Confirm Password',
          'id' => 'confirm_pass',
          'name' => 'confirm_pass',
          'required' => true,
          'value' => ''
        ),
        'register' => array(
          'type' => 'submit',
          'id' => 'register',
          'name' => 'register',
          'value' => 'Register'
        ),
      ),
      'account_form' => array( // change password form
        'old_pass' => array(
          'type' => 'password',
          'label' => 'Current Password',
          'id' => 'old_pass',
          'name' => 'old_pass',
          'required' => true,
          'value' => ''
        ),
        'new_pass' => array(
          'type' => 'password',
          'label' => 'New Password',
          'id' => 'new_pass',
          'name' => 'new_pass',
          'required' => true,
          'value' => ''
        ),
        'confirm_new_pass' => array(
          'type' => 'password',
          'label' => 'Confirm New Password',
          'id' => 'confirm_new_pass',
          'name' => 'confirm_new_pass',
          'required' => true,
          'value' => ''
        ),
        'change_pass' => array(
          'type' => 'submit',
          'id' => 'change_pass',
          'name' => 'change_pass',
          'value' => 'Change Password'
        )
      ),
      'orientation_form' => array( // send orientation code
        'orientation_code' => array(
          'type' => 'text',
          'label' => 'Orientation Code',
          'id' => 'orientation_code',
          'name' => 'orientation_code',
          'value' => '',
          'required' => true
        ),
        'submit_orientation' => array(
          'type' => 'submit',
          'id' => 'submit_orientation',
          'name' => 'submit_orientation',
          'value' => 'Send Code'
        )
      ),
      'resend_form' => array( //resend account confirmation email
          'resend' => array(
              'type' => 'submit',
              'id' => 'resend',
              'name' => 'resend',
              'value' => 'Resend Confirmation Email'
          )
      ),
      'reset_request_form' => array( // send password reset email
        'email' => array(
          'type' => 'email',
          'label' => 'Email Address Associated with your Account',
          'id' => 'email',
          'name' => 'email',
          'value' => '',
          'required' => true
        ),
        'ufid' => array(
          'type' => 'text',
          'label' => 'Your UFID',
          'id' => 'ufid',
          'name' => 'ufid',
          'value' => '',
          'required' => true,
          'placeholder' => '########'
        ),
        'reset' => array(
          'type' => 'submit',
          'id' => 'reset',
          'name' => 'reset',
          'value' => 'Send New Password'
        )
      )
    );
   }

   /**
   *
   */

   public function init(){
     // Initialize class variables
     $this->data = wire('modules')->getModuleConfigData($this);
     $this->inputfields = $this->getInputfields();
     $this->loginPageID = $this->data["login_page_id"];
     $this->registerPageID = $this->data["register_page_id"];
     $this->accountPageID = $this->data["account_page_id"];;
     $this->resetPassPageID = $this->data["reset_page_id"];
     $this->response = array();
   }

   /**
   *
   */

   public function ready(){

     // Handle the results of login, logout, register, password reset,
     // password change forms
     $this->handleLogin();
     $this->handleLogout();
     $this->handleRegister();
     $this->handleConfirmRegistration();
     $this->handleRequestReset();
     $this->handlePassChange();
     $this->handleOrientationCode();
     $this->handleResend();

     // we use the ready function for page hooks because by now we know what
     // page is being loaded
     $this->hookBuildForms();
   }

   protected function handleLogin(){
     $page = wire('page');
     if(wire('input')->post->login){
       $this->response = array();
       //login the user
       $user = wire('sanitizer')->username(wire('input')->post->user);
     	 $pass = wire('input')->post->pass;
       if(wire("session")->login($user, $pass)){
        //  wire('session')->redirect($config->urls->root);
       } else {
         $this->response[] = "<p class='error'>Login Failed. Make sure your username and password are correct.</p>";
       }
     }
   }

   protected function handleLogout(){
     $page = wire('page');
     if(wire('input')->get->logout == 1) {
       //logout the user
       //needless to say, the logout button needs to get with a logout param
     	wire('session')->logout();
      wire('session')->redirect($page->httpUrl);
     }
   }

   protected function handleRegister(){
     $page = wire('page');
     if(wire('input')->post->register){
       //register the user
       $this->response = array();
       $user = wire('sanitizer')->name(wire('input')->post->user);
       $existingUser = wire('users')->get($user);
      //  TODO: The error messages need to be accessible from the form builder so that
      // I can conditionally render them on injecting the form.
      if($existingUser->id){
 				$this->response[] = "<p class='error'>Sorry, that username is already taken.</p>";
 			}
 			if(strlen($user) == 0){
 				$this->response[] = "<p class='error'>Only alphanumeric characters, '_', and '.' are allowed.</p>";
 			}
 			$pass = wire('sanitizer')->text(wire('input')->post->pass);
 			$confirmpass = wire('sanitizer')->text(wire('input')->post->confirm_pass);
 			if($pass != $confirmpass){
 				$this->response[] = "<p class='error'>Passwords must match.</p>";
 			}
 			$email = wire('sanitizer')->email(wire('input')->post->email);
      $confirmemail = wire('sanitizer')->email(wire('input')->post->confirm_email);
 			$existingEmail = wire('users')->get("email=".$email);
 			if(strlen($email) == 0){
 				$this->response[] = "<p class='error'>Must be a valid email.</p>";
 			}
 			if($existingEmail->id){
 				$this->response[] ="<p class='error'>That email address is associated with an existing user.</p>";
 			}
      if($confirmemail != $email){
        $this->response[] = "<p class='error'>Email and confirmation must match.</p>";
      }
 			$ufid = wire('sanitizer')->text(wire('input')->post->ufid);
 			$existingUFID = wire('users')->get("ufid=".$ufid);
 			if(strlen($ufid) == 8){
 				$test = preg_filter('/[^0-9]/', "", $ufid);
 				if(strlen($test) != 0){
 					$this->response[] ="<p class='error'>Only numbers 0-9 allowed.</p>";
 				}
 				if($existingUFID->id){
 					$this->response[] ="<p class='error'>There is already a user associated with that UFID.";
 				}
 			} else {
 				$this->response[] = "<p class='error'>Must have exactly eight numbers.</p>";
 			}
 			if(!count($this->response)){
 				$token = bin2hex(openssl_random_pseudo_bytes(16));
 				$u = new User();
 		    $u->of(false);
 		    $u->name = $user;
 		   	$u->email = $email;
 		    $u->pass = $pass;
 		    $u->ufid = $ufid;
 		    $u->passkey = $token;
 		    $u->addRole('guest');
 		    $u->save();
 		    $u->of(true);
 		    // Send email confirming registration, and providing link to confirm
        // email address
        $confirmurl = $page->httpUrl."?confirm_emailaddress=".$u->id;
        if($this->sendEmail($email, $user, $this->data["contact_email"], $this->data["contact_name"],
          $this->data["register_subject"], str_replace("[url]", $confirmurl, $this->data["register_body"]))){
            //login the new user
           wire('session')->login($user, $pass);
           wire('session')->redirect($page->httpUrl);
        }
 			}  else {
 				wire('session')->login_error = 'Login Failed. Please try again, or use the forgot password link below.';
 			}
     }
   }

   protected function handleConfirmRegistration(){
     if(wire('input')->get->confirm_emailaddress){
       //confirm registration
       //set privileges
       $acctPage = wire('pages')->get($this->accountPageID);
       $u = wire('users')->get(wire('input')->get->confirm_emailaddress);
       $tu = wire('roles')->get("tmpuser");
       if($u->id && !$u->hasRole($tu)){
         $u->of(false);
         //user is now, confirmed, but not oriented
         $u->addRole($tu);
         $u->save();
         $u->of(true);
         $response[] = "<p class='message'>Email Address Confirmed!</p>";
         //send email
         $this->sendEmail($u->email, $u->name, $this->data["contact_email"], $this->data["contact_name"],
         $this->data["confirm_subject"], $this->data["confirm_body"]);
         wire('session')->redirect($acctPage->httpUrl."?addrconfirm=1");
       }
     }
   }

   protected function handleRequestReset(){
     //the user just clicked send on the send password reset link form
     //we will make sure a user exists with that email, and then send a new
     // password to that address
     if(wire('input')->post->reset){
       $this->response = array();
       $inEmail = wire('sanitizer')->email(wire('input')->post->email);
       $inufid = wire('sanitizer')->text(wire('input')->post->ufid);
       $resetuser = wire('users')->get("email=$inEmail, ufid=$inufid");
       if($resetuser->id){
        //  send an email to the user with a link to reset the password
        $newpass = substr(md5(uniqid(rand(),1)),3,10);
        $resetuser->of(false);
        $resetuser->pass = $newpass;
        $resetuser->save();
        $resetuser->of(true);
        $this->sendEmail($resetuser->email, $resetuser->name,
        $this->data['contact_email'], $this->data['contact_name'],
        $this->data['reset_subject'], str_replace("[pass]", $newpass, $this->data['reset_body']));
        $this->response[] = "<p class='error'>Password reset! Please check your email to receive your new password.</p>";
        if(wire('user')->isLoggedIn()){
          wire('session')->logout();
        }
       } else {
         $this->response[] = "<p class='error'>No user found with that email address and/or ufid.</p>";
       }
     }
   }

   /**
   *
   */

   protected function handleResend(){
     if(wire('input')->post->resend && wire('user')->isLoggedIn()){
       $u = wire('user');
       $page = wire('page');
       $email = $u->email;
       $user = $u->name;
       $confirmurl = $page->httpUrl."?confirm_emailaddress=".$u->id;
       if($this->sendEmail($email, $user, $this->data["contact_email"], $this->data["contact_name"],
         $this->data["register_subject"], str_replace("[url]", $confirmurl, $this->data["register_body"]))){
          $this->response[] = "<p class='message'>Confirmation Email Sent! Make sure to check your spam folder.</p>";
       }
     }
   }

   protected function handlePassChange(){
     // the user just clicked on the password change button in their account page.
     // we will make sure the new passwords match and update her login credentials
     $u = wire('user');
     if(wire('input')->post->change_pass && $u->isLoggedIn()){
      //  check that old pass = current pass
      //  check that new pass = confirm new pass
      $oldpass = wire('sanitizer')->text(wire('input')->post->old_pass);
      $newpass = wire('sanitizer')->text(wire('input')->post->new_pass);
      $confirmpass = wire('sanitizer')->text(wire('input')->post->confirm_new_pass);
      if(!wire('session')->login($u->name, $oldpass)){
        $this->response[] = "<p class='error'>You input your current password incorrectly.</p>";
        return;
      }
      if($newpass != $confirmpass){
        $this->response[] = "<p class='error'>Passwords provided don't match.</p>";
        return;
      }
        $u->of(false);
        $u->pass = $newpass;
        $u->save();
        $u->of(true);
        $this->response[] = "<p class='message'>Password successfully changed.</p>";
     }
   }

   /**
   *
   */

   protected function handleOrientationCode(){
     if($this->input->post->submit_orientation){
       $ocode = $this->input->post->orientation_code;
       $u = wire('user');
       $ur = wire('roles')->get("user");
       if($ocode == $this->data["orientation_code"] && $u->isLoggedIn() && !$u->hasRole($ur)){
         $u->of(false);
         $u->addRole($ur);
         $u->save();
         $u->of(true);
         $this->sendEmail($u->email, $u->name, $this->data['contact_email'],
         $this->data['contact_name'], $this->data['oriented_subject'], $this->data['oriented_body']);
       }
     }
   }

   /**
   *
   */

   protected function hookBuildForms(){
     // use ids assigned in init to determine if we're interested in the page
     // we are loading. This is all routing for BUILDING FORMS. The routing
     // in init() is for handling responses/requests (what to do with a form
     // after it is uploaded)
     $page = wire('page');
     if($page->id == $this->loginPageID){
       // hook to the TemplateFile::render function to inject a form
       // simple username + pass + submit button
       $this->addHookAfter("TemplateFile::render", $this, "buildLoginForm");
     }

     if($page->id == $this->registerPageID){
       // username + ufid + email + confirm email + password + confirm password
       // + submit button
       $this->addHookAfter("TemplateFile::render", $this, "buildRegisterForm");
     }

     if($page->id == $this->accountPageID){
       // change password (old pass + new pass) + output user data (name, ufid,
       // email, uploads(with progress for each file))
       $this->addHookAfter("TemplateFile::render", $this, "buildAccountForm");
     }

     if($page->id == $this->resetPassPageID){
       //render password reset request form
       $this->addHookAfter("TemplateFile::render", $this, "buildResetRequestForm");
     }
   }

   /**
   *
   */

   protected function buildLoginForm(HookEvent $event){
     if(!wire('user')->isLoggedIn()){
       $builder = new LabUserFormBuilder($event, $this->response);
       $event->return = str_replace("[login]", $builder->buildForm("login"), $event->return);
    } else {
      wire('session')->redirect(wire('pages')->get($this->accountPageID)->httpUrl);
    }
    $this->response = array();
   }

   /**
   *
   */

   protected function buildRegisterForm(HookEvent $event){
     if(!wire('user')->isLoggedIn()){
       $builder = new LabUserFormBuilder($event, $this->response);
       $event->return = str_replace("[register]", $builder->buildForm("register"), $event->return);
    } else {
      wire('session')->redirect(wire('pages')->get($this->accountPageID)->httpUrl);
    }
    $this->response = array();
   }

   /**
   *
   */

   protected function buildAccountForm(HookEvent $event){
     if(wire('user')->isLoggedIn()){
       if(wire('input')->get->addrconfirm){
         $this->response[] = "<p class='message'>Email Address Confirmed!</p>";
       }
       $builder = new LabUserFormBuilder($event, $this->response);
      // if uploader or charger modules are installed, inject tables of associated
      // uploads and charges
      $uploadTable = "";
      $chargeTable = "";

      if(wire('modules')->isInstalled("Uploader")){
        $uploadTable.=$builder->buildUploadsTable();
      }
      if(wire('modules')->isInstalled("Charger")){
        $chargeTable.=$builder->buildChargesTable();
      }
      $event->return = str_replace("[account]",
      $builder->buildForm("account").$builder->buildForm("orientation").$builder->buildForm("resend").$uploadTable.$chargeTable,
      $event->return);
    } else {
      wire('session')->redirect(wire('pages')->get($this->loginPageID)->httpUrl);
    }
   }

   /**
   *
   */

   public function clearResponse(){
     $this->response = array();
   }

   /**
   *
   */

   protected function buildResetRequestForm(HookEvent $event){
     $builder = new LabUserFormBuilder($event, $this->response);
     $event->return = str_replace("[reset]", $builder->buildForm("reset_request"), $event->return);
     $this->response = array();
   }

   /**
   *
   */

   private function getFrontendPage($name, $title, $parent, $body){
     $p = $this->wire('pages')->get("name=$name");
     if(!$p->id){
       $p = new Page();
       $p->template = "basic-page"; //user will likely want to change this to something else
       $p->name = $name;
       $p->title = $title;
       $p->parent = $this->wire('pages')->get($parent);
       $p->body = $body;
       $p->save();
     }
     return $p;
   }

   /**
   *
   */

   private function getField($name, $type){
     $f = $this->fields->get("name=$name");
     if(!$f->id){
         $f = new Field();
         $f->name = $name;
         $f->type = $type;
         if(!strcmp($type, "FieldtypeFile")){
           $f->extensions = str_replace(",", " ", self::getDefaultConfig()["allowed_filetypes"]["value"]);
           $f->maxFiles = 1;
         }
         if(!strcmp($type, "FieldtypePage")){
           // TODO: custom configuration for page fieldtype?
           $f->findPagesSelector = 'template=item, check_access=0, include=all';
           $f->template_id = wire('templates')->get("name=item")->id;
           $f->inputfield = "InputfieldSelect";
         }
         $f->label = ucwords(str_replace("_", " ", $name));
         $f->tags = "user";
         $f->save();
     }
     return $f;
   }

   /**
   *
   */

   private function deletePageByName($name){
     $this->message("page name: " . $name);
     $page = $this->wire('pages')->get("name=$name, include=all, check_access=0");
     if($page->id){
       $this->message("delete page: " . $page->name);
       $this->wire('pages')->delete($page, true);
     }
   }

   /**
   *
   */

   protected function flattenConfig($array){
     // returns an array that has just the key,value relations of the config arrays
     // removes the types and labels
     $out = array();
     foreach ($array as $key => $value) {
       $out[$key] = $value['value'];
     }
     return $out;
   }

   /**
   *
   */

   protected function sendEmail($to, $toName, $from, $fromName, $subject, $body){
     $mailer = wireMail();
     $mailer->to($to, $toName)->from($from, $fromName);
     $mailer->subject($subject)->body($body);
     $recipients = $mailer->send();
     return $recipients;
   }

   /**
   *
   */

   public function install(){
     $defaults = self::getDefaultConfig();
     // create login page, create register page, create account page
     $loginPage = $this->getFrontendPage("log-in", "Login", "/", "[login]");
     $registerPage = $this->getFrontendPage("register", "Register", "/", "[register]");
     $accountPage = $this->getFrontendPage("account", "Account", "/", "[account]");
     $resetPassPage = $this->getFrontendPage("reset-password", "Reset Password", "/", "[reset]");
     // add ufid to User template
     $userfields = wire('templates')->get("name=user")->fields;
     if(!$userfields->has("ufid")){
       $ufidField = $this->getField("ufid", "FieldtypeText");
       $userfields->add($ufidField);
       $userfields->save();
     }
     // save login, register, account pageids to the config
     foreach ($this->roles as $role => $permissions) {
       if(!wire('roles')->get($role)->id){
         $r = wire('roles')->add($role);
         foreach ($permissions as $p) {
           $r->addPermission($p);
         }
         wire('roles')->save($r);
       }
     }
     $defaults = $this->flattenConfig($defaults);
     $defaults['login_page_id'] = $loginPage->id;
     $defaults['register_page_id'] = $registerPage->id;
     $defaults['account_page_id'] = $accountPage->id;
     $defaults['reset_page_id'] = $resetPassPage->id;
     wire('modules')->saveModuleConfigData($this, $defaults);
   }

   /**
   *
   */

   public function uninstall(){
     // delete login page, register page, account page,
     $this->deletePageByName("log-in");
     $this->deletePageByName("register");
     $this->deletePageByName("account");
     $this->deletePageByName("reset-password");
     foreach ($this->roles as $role => $permissions) {
       if(wire('roles')->get($role)->id){
         wire('roles')->delete(wire('roles')->get($role));
       }
     }
     // remove ufid field from user template
     $userfields = wire('templates')->get("name=user")->fields;
     $userfields->remove("name=ufid");
     $userfields->save();
   }

   /**
   *
   */

   public static function getModuleConfigInputFields(array $data) {
     $inputfields = new InputFieldWrapper();
     $defaults = self::getDefaultConfig();

     foreach ($defaults as $key => $value) {
         $field = wire('modules')->get($value['type']);
         $field->name = $key;
         $field->label = $value['label'];
         if(isset($data[$key])){
           $field->value = $data[$key];
         } else {
           $field->value = $value['value'];
         }
         $inputfields->add($field);
     }
     return $inputfields;
   }

 }

 ?>
