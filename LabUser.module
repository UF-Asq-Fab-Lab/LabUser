<?php
/**
 * A²Fab Lab User Extensions Module
 *
 * Developed for the A² Fab Lab at the University of Florida.
 * Root Module that handles installing, uninstalling and hooking together
 * the child modules for the Lab User extensions. Login, registration, account
 * management are all covered.
 *
 * Thomas R Storey, 2015
 * Licensed under MIT License, see LICENSE.TXT
 *
 * http://fablab.arts.ufl.edu
 * https://github.com/UF-Asq-Fab-Lab
 *
 */

 class LabUser extends WireData implements Module, ConfigurableModule {

   protected $accountPageID;
   protected $loginPageID;
   protected $registrationPageID;
   protected $resetPassPageID;
   //these will be passed to the form builder object upon initialization for
   //conditional form rendering.
   protected $response;

   public static function getModuleInfo(){
     return array(
       'title' => 'A² Fab Lab User Extensions',
       'summary' => 'The Root Module for the A² Fab Lab User Extensions',
       'version' => 100,
       'author' => "Thomas R Storey",
       'autoload' => true,
       'singular' => true,
       'permanent' => false,
       'installs' => array("LabUserFormBuilder")
     );
   }

   /**
   *
   */

   public static function getDefaultConfig(){
     return array(
       'login_page_id' => array(
        'type' => 'InputfieldInteger',
        'value' => 0,
        'label' => 'Login Page ID (should be filled automatically, but you may need to change it if you move the login page)',
         ),
       'register_page_id' => array(
        'type' => 'InputfieldInteger',
        'value' => 0,
        'label' => 'Register Page ID (should be filled automatically, but you may need to change it if you move the register page)',
         ),
       'account_page_id' => array(
        'type' => 'InputfieldInteger',
        'value' => 0,
        'label' => 'Account Page ID (should be filled automatically, but you may need to change it if you move the account page)',
         ),
       'reset_page_id' => array(
         'type' => 'InputfieldInteger',
         'value' => 0,
         'label' => 'Password Reset Page ID (should be filled automatically, but you may need to change it if you move the page)'
       ),
       'orientation_code' => array(
         'type' => 'InputfieldText',
         'value' => 'code',
         'label' => 'Set the code that users have to input to prove they completed an orientation. Change this every orientation session!'
       ),
       'contact_email' => array(
        'type' => 'InputfieldEmail',
        'value' => 'admin@fablab.com',
        'label' => 'Contact email for all user-related communications',
        ),
       'contact_name' => array(
        'type' => 'InputfieldText',
        'value' => 'Fablab Admin',
        'label' => 'Contact name for all user-related communications',
        ),
       'register_subject' => array(
        'type' => 'InputfieldText',
        'value' => 'Fablab Registration: Confirm your email address',
        'label' => 'Subject line for automated registration emails.',
        ),
       'register_body' => array(
        'type' => 'InputfieldTextarea',
        'value' => 'Follow <a href="[url]">this link</a> to confirm your email address and activate your account!',
        'label' => 'Body text for automated registration emails.',
        ),
        'confirm_subject' => array(
         'type' => 'InputfieldText',
         'value' => 'Fablab Registration: Thanks! Your email address is confirmed',
         'label' => 'Subject line for automated account confirmation emails',
         ),
        'confirm_body' => array(
         'type' => 'InputfieldTextarea',
         'value' => 'Your email address has been successfully verified. Your next step is to go to an orientation if you have not already.',
         'label' => 'Body text for automated account confirmation emails',
         ),
       'reset_subject' => array(
        'type' => 'InputfieldText',
        'value' => 'Fablab Account: You changed your password',
        'label' => 'Subject line for automated registration emails.',
       ),
       'reset_body' => array(
         'type' => 'InputfieldTextarea',
         'value' => 'You requested a password reset for fablab.arts.ufl.edu. If this is the case, follow <a href="[url]">this link, if not, ignore this email.',
         'label' => 'Body text for automated password change emails. Should provide a link to confirm the password change'
       )
     );
   }

   /**
   * Get info for inputfields for all the forms handled by this module.
   * login, register, change password, reset password request, reset password,
   * enter orientation code
   */

   public static function getInputfields(){
     return array (
      'login_form' => array( // login form
        'user' => array(
          'type' => 'InputfieldText',
          'label' => 'Username',
          'id' => 'user',
          'name' => 'user',
          'required' => true,
          'value' => ''
        ),
        'pass' => array(
          'type' => 'InputfieldPassword',
          'label' => 'Password',
          'id' => 'pass',
          'name' => 'pass',
          'required' => true,
          'value' => ''
        ),
        'login' => array(
          'type' => 'InputfieldSubmit',
          'label' => 'Login',
          'id' => 'login',
          'name' => 'login',
          'value' => 'Login'
        )
      ),
      'register_form' => array( // register form
        'username' => array(
          'type' => 'InputfieldText',
          'label' => 'Username',
          'id' => 'user',
          'name' => 'user',
          'required' => true,
          'value' => ''
        ),
        'email' => array(
          'type' => 'InputfieldEmail',
          'label' => 'Email Address',
          'id' => 'email',
          'name' => 'email',
          'required' => true,
          'value' => ''
        ),
        'confirm_email' => array(
          'type' => 'InputfieldEmail',
          'label' => 'Confirm Email',
          'id' => 'confirm_email',
          'name' => 'confirm_email',
          'required' => true,
          'value' => ''
        ),
        'ufid' => array(
          'type' => 'InputfieldText',
          'label' => 'UFID Number',
          'id' => 'ufid',
          'name' => 'ufid',
          'required' => true,
          'value' => '',
          'placeholder' => '########'
        ),
        'pass' => array(
          'type' => 'InputfieldPassword',
          'label' => 'Password',
          'id' => 'pass',
          'name' => 'pass',
          'required' => true,
          'value' => ''
        ),
        'confirm_pass' => array(
          'type' => 'InputfieldPassword',
          'label' => 'Confirm Password',
          'id' => 'confirm_pass',
          'name' => 'confirm_pass',
          'required' => true,
          'value' => ''
        ),
        'register' => array(
          'type' => 'InputfieldSubmit',
          'label' => 'Register',
          'id' => 'register',
          'name' => 'register',
          'value' => 'Register'
        ),
      ),
      'account_form' => array( // change password form
        'old_pass' => array(
          'type' => 'InputfieldPassword',
          'label' => 'Current Password',
          'id' => 'old_pass',
          'name' => 'old_pass',
          'required' => true,
          'value' => ''
        ),
        'new_pass' => array(
          'type' => 'InputfieldPassword',
          'label' => 'New Password',
          'id' => 'new_pass',
          'name' => 'new_pass',
          'required' => true,
          'value' => ''
        ),
        'confirm_new_pass' => array(
          'type' => 'InputfieldPassword',
          'label' => 'Confirm New Password',
          'id' => 'confirm_new_pass',
          'name' => 'confirm_new_pass',
          'required' => true,
          'value' => ''
        ),
        'change_pass' => array(
          'type' => 'InputfieldSubmit',
          'label' => 'Change Password',
          'id' => 'change_pass',
          'name' => 'change_pass',
          'value' => 'Change Password'
        )
      ),
      'orientation_form' => array( // send orientation code
        'orientation_code' => array(
          'type' => 'InputfieldText',
          'label' => 'Orientation Code',
          'id' => 'orientation_code',
          'name' => 'orientation_code',
          'value' => '',
          'required' => true
        ),
        'submit_orientation' => array(
          'type' => 'InputfieldSubmit',
          'label' => 'Send Code',
          'id' => 'submit_orientation',
          'name' => 'submit_orientation',
          'value' => 'Send Code'
        )
      ),
      'reset_request_form' => array( // send password reset email
        'email' => array(
          'type' => 'InputfieldEmail',
          'label' => 'Email Address Associated with your Account',
          'id' => 'email',
          'name' => 'email',
          'value' => '',
          'required' => true
        ),
        'reset' => array(
          'type' => 'InputfieldSubmit',
          'label' => 'Send Password Reset Link',
          'id' => 'reset',
          'name' => 'reset',
          'value' => 'Send Password Reset Link'
        )
      )
   }

   /**
   *
   */

   public function init(){
     // Initialize class variables
     $this->data = wire('modules')->getModuleConfigData($this);
     $this->inputfields = $this->getInputfields();
     $this->loginPageID = $this->data["login_page_id"];
     $this->registerPageID = $this->data["register_page_id"];
     $this->accountPageID = $this->data["account_page_id"];;
     $this->resetPassPageID = $this->data["reset_page_id"];
     $this->response = array();
     // special request handling

   }

   /**
   *
   */

   public function ready(){

     // Handle the results of login, logout, register, password reset,
     // password change forms
     $this->handleLogin();
     $this->handleLogout();
     $this->handleRegister();
     $this->handleConfirmRegistration();
     $this->handleRequestReset();
     $this->handlePassChange();
     $this->handleOrientationCode();

     // we use the ready function for page hooks because by now we know what
     // page is being loaded
     $this->hookBuildForms();
   }

   protected function handleLogin(){
     if($input->post->login){
       $this->response = array();
       //login the user
       $user = $sanitizer->username($input->post->user);
     	 $pass = $input->post->pass;
       if(wire("session")->login($user, $pass)){
         $session->redirect($page->path);
       } else {
         $this->response[] = "<p class='error'>Login Failed. Make sure your username and password are correct.</p>";
       }
     }
   }

   protected function handleLogout(){
     if($input->get->logout == 1) {
       //logout the user
       //needless to say, the logout button needs to get with a logout param
     	$session->logout();
      $session->redirect($page->path);
     }
   }

   protected function handleRegister(){
     if($input->post->register){
       //register the user
       $this->response = array();
       $user = wire('sanitizer')->name(wire('input')->post->user);
       $existingUser = wire('users')->get($user);
      //  TODO: The error messages need to be accessible from the form builder so that
      // I can conditionally render them on injecting the form.
      if($existingUser->id){
 				$this->response[] = "<p class='error'>Sorry, that username is already taken.</p>";
 			}
 			if(strlen($user) == 0){
 				$this->response[] = "<p class='error'>Only alphanumeric characters, '_', and '.' are allowed.</p>";
 			}
 			$pass = $sanitizer->text($input->post->pass);
 			$confirmpass = $sanitizer->text($input->post->confirm_pass);
 			if($pass != $confirmpass){
 				$this->response[] = "<p class='error'>Passwords must match.</p>";
 			}
 			$email = $sanitizer->email($input->post->email);
      $confirmemail = $sanitizer->email($input->post->confirm_email);
 			$existingEmail = $users->get("email=".$email);
 			if(strlen($email) == 0){
 				$this->response[] = "<p class='error'>Must be a valid email.</p>";
 			}
 			if($existingEmail->id){
 				$this->response[] ="<p class='error'>That email address is associated with an existing user.</p>";
 			}
      if($confirmemail != $email){
        $this->response[] = "<p class='error'>Email and confirmation must match.</p>";
      }
 			$ufid = $sanitizer->text($input->post->ufid);
 			$existingUFID = $users->get("ufid=".$ufid);
 			if(strlen($ufid) == 8){
 				$test = preg_filter('/[^0-9]/', "", $ufid);
 				if(strlen($test) != 0){
 					$this->response[] ="<p class='error'>Only numbers 0-9 allowed.</p>";
 				}
 				if($existingUFID->id){
 					$this->response[] ="<p class='error'>There is already a user associated with that UFID.";
 				}
 			} else {
 				$this->response[] = "<p class='error'>Must have exactly eight numbers.</p>";
 			}
 			if(!count($this->response)){
 				$token = bin2hex(openssl_random_pseudo_bytes(16));
 				$u = new User();
 		    $u->of(false);
 		    $u->name = $user;
 		   	$u->email = $email;
 		    $u->pass = $pass;
 		    $u->ufid = $ufid;
 		    $u->passkey = $token;
 		    $u->addRole('guest');
 		    $u->save();
 		    $u->of(true);
 		    // Send email confirming registration, and providing link to confirm
        // email address
        $confirmurl = $page->httpUrl."?confirm_email=".$u->id;
        wireMail($email, $user, $this->data["contact_email"], $this->["contact_name"],
        $this->data["register_subject"], str_replace("[url]", $cofirmurl, $this->data["register_body"]));
        //login the new user
 				wire('session')->login($user, $pass);
        wire('session')->redirect($page->path);
 				}  else {
 					wire('session')->login_error = 'Login Failed. Please try again, or use the forgot password link below.';
 				}
     }
   }

   protected function handleConfirmRegistration(){
     if(wire('input')->get->confirm_email){
       //confirm registration
       //set privileges
       $u = wire('users')->get(wire('input')->get->confirm_email);
       if($u->id){
         $u->of(false);
         //user is now, confirmed, but not oriented
         $u->roles->add("subuser");
         $u->save();
         $u->of(true);
       }
       //send email
       wireMail($u->email, $u->name, $this->data["contact_email"], $this->data["contact_name"],
       $this->data["confirm_subject"], $this->data["confirm_body"]);
       $this->addHookAfter("TemplateFile::render", $this, "hookBuildEmailConfirmed");
     }
   }

   protected function handleRequestReset(){
     //the user just clicked send on the send password reset link form
     //we will make sure a user exists with that email, and then send a new
     // password to that address
     if($input->post->request_reset){
       $this->response = array();
       $inEmail = $sanitizer->email($input->post->email);
       $resetuser = $users->get("email=$inEmail");
       if($resetuser->id){
        //  send an email to the user with a link to reset the password
        $newpass = substr(md5(uniqid(rand(),1)),3,10);
        $user->of(false);
        $user->pass = $newpass;
        $user->save();
        $user->of(true);
        wireMail($resetuser->email, $resetuser->name,
        $this->data['contact_email'], $this->data['contact_name'],
        $this->data['reset_subject'], str_replace("[pass]", $newpass, $this->data['reset_body']));
       } else {
         $this->response[] = "<p class='error'>No user found with that email address.</p>";
       }
     }
   }

   protected function handlePassChange(){
     // the user just clicked on the password change button in their account page.
     // we will make sure the new passwords match and update her login credentials
     if($input->post->pass_change){
      //  check that old pass = current pass
      //  check that new pass = confirm new pass
      $oldpass = $sanitizer->text($input->post->old_pass);
      $currentpass = $user->pass;
      $newpass = $sanitizer->text($input->post->new_pass);
      $confirmpass = $sanitizer->text($input->post->confirm_new_pass);
      if($oldpass == $currentpass && $newpass == $confirmpass){
        $user->of(false);
        $user->pass = $newpass;
        $user->save();
        $user->of(true);
        $this->response[] = "<p>Password successfully changed.</p>";
      } else {
        $this->response[] = "<p>Passwords provided don't match.</p>";
      }
     }
   }

   /**
   *
   */

   protected function handleOrienationCode(){
     if($ocode = $this->input->post->submit_orientation){
       if($ocode == $this->data["orientation_code"]){
         $user->of(false);
         $user->roles->add("user");
         $user->save();
         $user->of(true);
       }
     }
   }

   /**
   *
   */

   protected function hookBuildForms(){
     // use ids assigned in init to determine if we're interested in the page
     // we are loading. This is all routing for BUILDING FORMS. The routing
     // in init() is for handling responses/requests (what to do with a form
     // after it is uploaded)
     if($page->id == $this->loginPageID){
       // hook to the TemplateFile::render function to inject a form
       // simple username + pass + submit button
       $this->addHookAfter("TemplateFile::render", $this, "buildLoginForm");
     }

     if($page->id == $this->registerPageID){
       // username + ufid + email + confirm email + password + confirm password
       // + submit button
       $this->addHookAfter("TemplateFile::render", $this, "buildRegisterForm");
     }

     if($page->id == $this->accountPageID){
       // change password (old pass + new pass) + output user data (name, ufid,
       // email, uploads(with progress for each file))
       $this->addHookAfter("TemplateFile::render", $this, "buildAccountForm");
     }

     if($page->id == $this->resetPassPageID){
       //render password reset request form
       $this->addHookAfter("TemplateFile::render", $this, "buildResetRequestForm");
     }
   }

   /**
   *
   */

   protected function buildLoginForm(HookEvent $event){
     $builder = new LabUserFormBuilder($event, $this->response);
    $event->return = str_replace("[login]", $builder->buildForm("login"), $event->return);
   }

   /**
   *
   */

   protected function buildRegisterForm(HookEvent $event){
     $builder = new LabUserFormBuilder($event, $this->response);
    $event->return = str_replace("[register]", $builder->buildForm("register"), $event->return);

   }

   /**
   *
   */

   protected function buildAccountForm(HookEvent $event){
     $builder = new LabUserFormBuilder($event, $this->response);
    // if uploader or charger modules are installed, inject tables of associated
    // uploads and charges
    $uploadTable = "";
    $chargeTable = "";
    if(wire('modules')->get("Uploader")->id){
      $uploadTable.=$builder->buildUploadsTable();
    }
    if(wire('modules')->get("Charger")->id){
      $chargeTable.=$builder->buildChargesTable();
    }
    $event->return = str_replace("[account]",
    $builder->buildForm("account").$builder->buildForm("orientation").$uploadTable.$chargeTable,
    $event->return);
   }

   /**
   *
   */

   protected function buildResetRequestForm(HookEvent $event){
     $builder = new LabUserFormBuilder($event);
     $event->return = str_replace("[reset]", $builder->buildForm("reset_request"), $event->return);
   }

   /**
   *
   */

   private function getFrontendPage($name, $title, $parent, $body){
     $p = $this->wire('pages')->get("name=$name");
     if(!$p->id){
       $p = new Page();
       $p->template = "basic-page"; //user will likely want to change this to something else
       $p->name = $name;
       $p->title = $title;
       $p->parent = $this->wire('pages')->get($parent);
       $p->body = $body;
       $p->save();
     }
     return $p;
   }

   /**
   *
   */

   private function getField($name, $type){
     $f = $this->fields->get("name=$name");
     if(!$f->id){
         $f = new Field();
         $f->name = $name;
         $f->type = $type;
         if(!strcmp($type, "FieldtypeFile")){
           $f->extensions = str_replace(",", " ", self::getDefaultConfig()["allowed_filetypes"]["value"]);
           $f->maxFiles = 1;
         }
         if(!strcmp($type, "FieldtypePage")){
           // TODO: custom configuration for page fieldtype?
           $f->findPagesSelector = 'template=item, check_access=0, include=all';
           $f->template_id = wire('templates')->get("name=item")->id;
           $f->inputfield = "InputfieldSelect";
         }
         $f->label = ucwords(str_replace("_", " ", $name));
         $f->tags = "user";
         $f->save();
     }
     return $f;
   }

   /**
   *
   */

   private function deletePageByName($name){
     $this->message("page name: " . $name);
     $page = $this->wire('pages')->get("name=$name, include=all, check_access=0");
     if($page->id){
       $this->message("delete page: " . $page->name);
       $this->wire('pages')->delete($page, true);
     }
   }

   /**
   *
   */

   private function deletePagesByTemplate($name){
     $pages = $this->wire('pages')->find("template=$name, include=all, check_access=0");
       foreach ($pages as $key => $p) {
         $this->message("Page:" . $key . " => " . $p);
         $this->message("delete page: " . $p->name);
         $this->wire('pages')->delete($p, true);
       }
   }

   /**
   *
   */

   private function deletePagesByProcess($prarray){
     foreach ($prarray as $pname) {
       $this->message("process page: " . $pname);
       $id = wire('modules')->getModuleID($pname);
       $this->message("Module ID: $id");
       if($id){
           $ppgs = wire("pages")->find("process=$id, include=all, check_access=0");
           foreach ($ppgs as $key => $page) {
               $this->message("delete process page: " . $page->name);
               $this->wire("pages")->delete($page, true);
           }
       }
     }
   }

   /**
   *
   */

   private function deleteTemplateByName($name){
       $this->message("Template:" . $name);
       $template = wire('templates')->get($name);
       $fg = wire('fieldgroups')->get($name);
       if($template->id){
         $this->message("delete template: " . $template->name);
         $this->wire("templates")->delete($template);

       }
       if($fg->id){
         $this->message("delete fieldgroup: " . $fg->name);
         $this->wire("fieldgroups")->delete($fg);
       }
   }

   /**
   *
   */

   private function deleteFields($fields){
     foreach($fields as $key => $f){
       $this->message("Field:" . $key . " => " . $f);
       $field = $this->wire('fields')->get($key);
       if($field->id && !strcmp($field->tags, "user")) {
         $this->message("delete field: " . $field->name);
         $this->wire('fields')->delete($field);
       }
     }
   }

   /**
   *
   */

   public function install(){
     $defaults = self::getDefaultConfig();
     $fields = self::getFields();
     // create login page, create register page, create account page
     $loginPage = $this->getFrontendPage("login", "Login", "/", "[login]");
     $registerPage = $this->getFrontendPage("register", "Sign Up", "/", "[register]");
     $accountPage = $this->getFrontendPage("account", "Account", "/", "[account]");
     // add ufid to User template
     $userfields = wire('templates')->get("name=user")->fields;
     if(!$userfields->has("ufid")){
       $ufidField = $this->getField("ufid", "FieldtypeText");
       $userfields->add($ufidField);
       $userfields->save();
     }
     // TODO: provide inputfield on account page that accepts a code received at orientation
     //  for self-orientation-activation
     // save login, register, account pageids to the config
     wire('roles')->add("tmpuser"); //pre orientation
     wire('roles')->add("user"); //post orientation - full user
     wire('roles')->add('intern'); //lab interns
     wire('roles')->add('assistant'); //lab assistants
     wire('roles')->add('admin'); //lab director and tech people
     $defaults['login_page_id'] = $loginPage->id;
     $defaults['register_page_id'] = $registerPage->id;
     $defaults['account_page_id'] = $accountPage->id;
     wire('modules')->saveModuleConfigData($this, $defaults);
   }

   /**
   *
   */

   public function uninstall(){
     $fields = self::getFields();
     // delete login page, register page, account page,
     $this->deletePageByName("login");
     $this->deletePageByName("register");
     $this->deletePageByName("account");
     // remove ufid field from user template
     $userfields = wire('templates')->get("name=user")->fields;
     $userfields->of(false);
     $userfields->remove("name=ufid");
     $userfields->save();
     $userfields->of(true);
   }

   /**
   *
   */

   public static function getModuleConfigInputFields(array $data) {
     $inputfields = new InputFieldWrapper();
     $defaults = self::getDefaultConfig();

     foreach ($defaults as $key => $value) {
         $field = wire('modules')->get($value['type']);
         $field->name = $key;
         $field->label = $value['label'];
         if(isset($data[$key])){
           $field->value = $data[$key];
         } else {
           $field->value = $value['value'];
         }
         $inputfields->add($field);
     }
     return $inputfields;
   }

 }

 ?>
