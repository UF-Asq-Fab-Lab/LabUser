<?php
/**
 * InfinityFab Lab User Extensions Module
 *
 * Developed for the Infinity Fab Lab at the University of Florida.
 * Root Module that handles installing, uninstalling and hooking together
 * the child modules for the Lab User extensions. Login, registration, account
 * management are all covered.
 *
 * Thomas R Storey, 2015
 * Licensed under MIT License, see LICENSE.TXT
 *
 * http://fablab.arts.ufl.edu
 * https://github.com/UF-Asq-Fab-Lab
 * sudo rm -R /var/www/html/sandbox/fablab/site/modules/LabUser && sudo cp ~/projects/fablab/LabUser /var/www/html/sandbox/fablab/site/modules/LabUser
 */

 class LabUser extends WireData implements Module, ConfigurableModule {

   protected $accountPageID;
   protected $loginPageID;
   protected $registrationPageID;
   protected $resetPassPageID;
   protected $response;
   protected $roles = array(
     "laser-user" => array(
       "page-view",
       "profile-edit"
     ),
     "cnc-user" => array(
       "page-view",
       "profile-edit"
     ),
     "3dprint-user" => array(
       "page-view",
       "profile-edit"
     ),
     "intern" => array(
       "page-view",
       "profile-edit",
       "page-edit",
       "page-delete"
     ),
     "assistant" => array(
       "page-view",
       "profile-edit",
       "page-edit",
       "page-delete",
       "page-move",
       "page-lock",
       "user-admin"
     ),
     "admin" => array(
       "page-view",
       "profile-edit",
       "page-edit",
       "page-delete",
       "page-move",
       "page-lock",
       "page-sort",
       "page-template",
       "user-admin"
     )
   );

   public static function getModuleInfo(){
     return array(
       'title' => 'Infinity Fab Lab User Extensions',
       'summary' => 'The Root Module for the Infinity Fab Lab User Extensions',
       'version' => 100,
       'author' => "Thomas R Storey",
       'autoload' => true,
       'singular' => true,
       'requires' => array("FabLabModuleHelpers>=1.0.0, ShibbolethLoginNew")
     );
   }

   /**
   *
   */

   public function init(){
     $this->data = wire('modules')->getModuleConfigData($this);
     $this->helper = wire('modules')->get('FabLabModuleHelpers');
    // Need to update?
    $old_ufid = $this->wire('fields')->get('ufid');
    if($old_ufid){
      // update!
      require_once('LabUserUpdate.php');
    }
    $this->addHookBefore('ShibbolethLoginNew::isUser', $this, 'hookBeforeShibbolethIsUser');
    $this->addHookAfter('ShibbolethLoginNew::createUser', $this, 'hookAfterShibbolethCreateUser');
    // $this->addHookAfter('ShibbolethLoginNew::updateUser', $this, 'hookAfterShibbolethUpdateUser');
    // Initialize class variables
    $this->accountPageID = $this->data["account_page_id"];

    $this->response = array();
    if($this->wire('config')->debug){
      $this->addHook('LazyCron::every30Seconds', $this, 'expireUsers');
    } else {
      $this->addHook('LazyCron::everyDay', $this, 'expireUsers');
    }
   }

   /**
   *
   */

   public function ready(){
     // Handle the results of login, logout, register, password reset,
     // password change forms
     $this->handleOrientationCode();
     // we use the ready function for page hooks because by now we know what
     // page is being loaded
     $this->hookBuildForms();
   }

   public function hookBeforeShibbolethIsUser(HookEvent $event){
     $event->arguments(0, 'lab_user_ufid');
   }

   public function hookAfterShibbolethCreateUser(HookEvent $event){
     $u = $event->return;
     $firstName = $_SERVER["HTTP_UFSHIB_GIVENNAME"];
     $lastName = $_SERVER["HTTP_UFSHIB_SN"];
     $email = $_SERVER["HTTP_UFSHIB_MAIL"];

     $u->lab_user_first_name = $firstName;
     $u->lab_user_last_name = $lastName;
     $u->email = $email;
     $event->return = $u;
   }


   public function expireUsers(HookEvent $e) {
    //  get all users
    $laserusers = wire('users')->find('roles=laser-user');
    // check creation date vs now
    foreach ($users as $key => $user) {
      if(!$user->get("lab_user_expiration_date")){
        $user->of(false);
        $user->lab_user_expiration_date = date('m/d/Y H:i:s', time()+($this->data['laser_user_lifetime']*24*60*60));
        $user->save();
        $user->of(true);
      } else {
        $ts_expires = $user->get("lab_user_expiration_date");
        $ts_now = time();
        if($ts_now > $ts_expires){
          // expire user
          $user->of(false);
          $user->removeRole('laser-user');
          $user->removeRole('cnc-user');
          $user->removeRole('3dprint-user');
          $user->save();
          $user->of(true);
        }
      }
    }
   }

   /**
   *
   */

   protected function handleOrientationCode(){
     if($this->input->post->submit_orientation){
       $ocode = $this->input->post->orientation_code;
       $pn = $this->input->post->phone_number;
       $u = wire('user');
       $laserUserRole = wire('roles')->get("laser-user");
       if($u->hasRole($ur)){
         $this->response[] = "<p class='message'>You're orientation has already been confirmed in our system.</p>";
         return;
       }
       if(!($u->lab_user_phone_number || $pn)){
         $this->response[] = "<p class='error'>Please input your phone number.</p>";
         return;
       }
       if(!strcmp($ocode, $this->data["orientation_code"]) && $u->isLoggedIn()){
         $u->of(false);
         $u->addRole($laserUserRole);
         $u->lab_user_expiration_date = date('m/d/Y H:i:s', time()+($this->data['laser_user_lifetime']*24*60*60));
         $u->save();
         $u->of(true);
         $this->response[] = "<p class='message'>Orientation code successfully autheticated. You may now use the Scheduler.</p>";
       } else {
         $this->response[] = "<p class='error'>Incorrect orientation code.</p>";
       }
     }
   }

   /**
   *
   */

   protected function hookBuildForms(){
     // use ids assigned in init to determine if we're interested in the page
     // we are loading. This is all routing for BUILDING FORMS. The routing
     // in init() is for handling responses/requests (what to do with a form
     // after it is uploaded)
     $page = wire('page');
     if(strpos($page->url, wire('config')->urls->admin) !== 0) {
       $this->addHookAfter("TemplateFile::render", $this, "buildAccountInfo");
     }
     if($page->id == $this->accountPageID){
       // change password (old pass + new pass) + output user data (name, ufid,
       // email, uploads(with progress for each file))
       $this->addHookAfter("TemplateFile::render", $this, "buildAccountForm");
     }
   }


   /**
   *
   */

   protected function buildAccountInfo(HookEvent $event){
     // render form to string.
     $path = wire('config')->paths->siteModules."/LabUser/accountInfo.inc";
     $res = $this->helper->renderFileToString($path);
     $event->return = str_replace("[account-info]", $res, $event->return);
   }


   /**
   *
   */

   protected function buildAccountForm(HookEvent $event){
     if(wire('user')->isLoggedIn()){
       // get all response messages.
       $res = "";
       foreach ($this->response as $value) {
         $res.=$value;
       }
       // render form to string.
       $orientPath = wire('config')->paths->siteModules."/LabUser/orientationForm.inc";
       $res .= $this->helper->renderFileToString($orientPath);
       $event->return = str_replace("[account]", $res, $event->return);
    } else {
      $this->wire('modules')->get('ShibbolethLoginNew')->execute();
    }
    $this->response = array();
   }

   /**
   *
   */

   public function install(){
     $defaults = wire('modules')->getModuleConfigData($this);
     $this->helper = wire('modules')->get('FabLabModuleHelpers');
     // create login page, create register page, create account page
     $accountPage = $this->helper->getFrontendPage("account");
     $accountPage->of(false);
     $accountPage->body = "[account]";
     $accountPage->save();
     $accountPage->of(true);

     // add ufid to User template
     $userfields = wire('templates')->get("name=user")->fields;
     $opt = array(
       "tags" => "LabUser",
       "datetimeFormat" => "m/d/Y H:i:s"
     );
     $fields = array(
       "lab_user_ufid" => array("type"=>"FieldtypeText", "options"=> $opt),
       "lab_user_first_name" => array("type"=>"FieldtypeText", "options"=> $opt),
       "lab_user_last_name" => array("type"=>"FieldtypeText", "options"=> $opt),
       "lab_user_phone_number" => array("type"=>"FieldtypeText", "options"=> $opt),
       "lab_user_expiration_date" => array("type"=>"FieldtypeDatetime", "options"=> $opt),
     );
     foreach ($fields as $name => $cfg) {
       if(!$userfields->has($name)){
         $labuserField = $this->helper->getField($name, $cfg['type'], $cfg['options']);
         $userfields->add($labuserField);
         $userfields->save();
       }
     }

    //  add roles and permissions
     foreach ($this->roles as $role => $permissions) {
       if(!wire('roles')->get($role)->id){
         $r = wire('roles')->add($role);
         foreach ($permissions as $p) {
           $r->addPermission($p);
         }
         wire('roles')->save($r);
       }
     }

     // save login, register, account pageids to the config
     $defaults = $this->helper->pluck($defaults, 'value');
     $defaults['login_page_id'] = $loginPage->id;
    //  $defaults['register_page_id'] = $registerPage->id;
     $defaults['account_page_id'] = $accountPage->id;
    //  $defaults['reset_page_id'] = $resetPassPage->id;
     wire('modules')->saveModuleConfigData($this, $defaults);
   }

   /**
   *
   */

   public function uninstall(){
     // delete login page, register page, account page,
     $this->helper->deletePageByName("log_in");
    //  $this->helper->deletePageByName("register");
     $this->helper->deletePageByName("account");
    //  $this->helper->deletePageByName("reset_password");
     foreach ($this->roles as $role => $permissions) {
       if(wire('roles')->get($role)->id){
         wire('roles')->delete(wire('roles')->get($role));
       }
     }
     // remove lab user fields from user template
     $userfields = wire('templates')->get("name=user")->fields;
     $userfields->remove("name=lab_user_ufid");
     $userfields->remove("name=lab_user_first_name");
     $userfields->remove("name=lab_user_last_name");
     $userfields->remove("name=lab_user_phone_number");
     $userfields->remove("name=lab_user_expiration_date");
     $userfields->save();
     // delete lab user fields.
     $this->helper->deleteFields(array("lab_user_ufid",
                                       "lab_user_phone_number",
                                       "lab_user_expiration_date",
                                       "lab_user_first_name",
                                       "lab_user_last_name"), "LabUser");
   }

 }

 ?>
